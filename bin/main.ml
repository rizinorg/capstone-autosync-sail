open Libsail
open Type_check
open Ast

open Capstone_autosync_sail
open Constants
open Gen_decoder
open Gen_stringifier

open C_codegen
open Ccodegen_clike_typedef
open Ccodegen_decode_procedure
open Ccodegen_stringifier
open Ccodegen_instr_types
open Ccodegen_operand_info

open Printexc

let get_generator_comment () sail_hash =
  "/*"
  ^ String.concat "*/\n/*"
      [
        " THIS IS AUTOGENERATED CODE VIA CAPSTONE-AUTOSYNC-SAIL";
        " DO NOT MODIFY THIS CODE MANUALLY. ANY MANUAL EDITS ARE OVERWRITTEN.";
        " using https://github.com/riscv/sail-riscv @ " ^ sail_hash;
        " SPDX-FileCopyrightText: 2025 deroad <deroad@kumo.xn--q9jyb4c>";
        " SPDX-FileCopyrightText: 2024-2025 moste00 <ubermenchun@gmail.com>";
        " SPDX-License-Identifier: BSD-3-Clause";
      ]
  ^ "*/\n\n"

let mkdir_if_none_exists dirname =
  try Sys.mkdir dirname 0o755 with Sys_error _ -> ()

let write_c_file ?(additional_includes = []) out_directory sail_hash name code =
  mkdir_if_none_exists out_directory;

  let oc = open_out (out_directory ^ "/" ^ name) in
  let mk_include_lines incs =
    String.concat "\n"
      (List.map
         (fun i ->
           let delimiter = if i.[0] = '<' || i.[0] = '"' then "" else "\"" in
           "#include " ^ delimiter ^ i ^ delimiter
         )
         incs
      )
    ^ "\n\n"
  in
  let include_string = mk_include_lines includes in
  let additional_includes_string = mk_include_lines additional_includes in
  let name_no_dots = String.map (fun c -> if c = '.' then '_' else c) name in
  Printf.fprintf oc "%s" (get_generator_comment () sail_hash);
  Printf.fprintf oc "%s"
    ("#ifndef __" ^ String.uppercase_ascii name_no_dots ^ "__\n");
  Printf.fprintf oc "%s"
    ("#define __" ^ String.uppercase_ascii name_no_dots ^ "__\n");
  Printf.fprintf oc "%s" include_string;
  Printf.fprintf oc "%s" additional_includes_string;
  Printf.fprintf oc "%s" code;
  Printf.fprintf oc "%s" "\n #endif\n";
  close_out oc

let sailpath = Unix.getenv "HOME" ^ "/.opam/default/share/sail/"

let paths_filename = ref "conf/sail-riscv-0.x.txt"
let out_directory = ref "generated_output"
let sail_hash = ref "<no commit hash>"

let usage_msg = "Usage: riscv_disasm_from_sail -f <path-to-list-of-input-files>"
let arg_spec =
  [
    ( "-f",
      Arg.Set_string paths_filename,
      "Path to a file containing a list of input files, a filename on each line"
    );
    ( "-o",
      Arg.Set_string out_directory,
      "Path to a directory where to generate the output"
    );
    ( "-c",
      Arg.Set_string sail_hash,
      "Git commit hash"
    );
  ]

let anon_arg_handler a =
  print_endline ("Unrecognized argument " ^ a ^ ", ignoring...")

let () = Arg.parse arg_spec anon_arg_handler usage_msg

let filepaths = Utils.read_file !paths_filename

let initial_typeenv = Type_check.initial_env

let dummyoptions =
  [
    ("-lem_extern_type", Arg.String (fun _ -> ()), "");
    ("-coq_extern_type", Arg.String (fun _ -> ()), "");
    ("-lean_extern_type", Arg.String (fun _ -> ()), "");
  ]

let _, ast, types, side_effects =
  try Frontend.load_files sailpath dummyoptions initial_typeenv filepaths
  with Reporting.Fatal_error e as ex ->
    Reporting.print_error e;
    raise ex

let ctypedefs, typdefwalker = Gen_clike_typedef.gen_def ast

let ctypedefs_str = stringify_typdef ctypedefs

let analysis = Sail_analysis.analyze ast types

let dec = gen_decoder ast_decode_mapping ast analysis

let compressed_dec = gen_decoder ast_compressed_decode_mapping ast analysis

let dec_str = decoder_to_c dec typdefwalker

let compressed_dec_str =
  decoder_to_c ~c_proc_name:"decode_compressed" compressed_dec typdefwalker

let asm = gen_stringifier ast analysis

let asm_str, tables_str = assembler_to_c asm typdefwalker

let gen_instr_types_conf =
  Gen_instr_types.read_config "conf/instruction-types/excluded_enums.txt"

let instr_types = Gen_instr_types.gen_instr_types analysis gen_instr_types_conf

let instr_types_str, instr_types_mapping_str =
  instr_types_to_c instr_types typdefwalker
(* 
let info = Gen_operand_info.gen_operand_info ast analysis
let info_str = operand_info_to_c info typdefwalker *)

let () = 
  write_c_file !out_directory !sail_hash ast_type_filename ctypedefs_str
let () =
  write_c_file !out_directory !sail_hash decode_logic_filename dec_str
    ~additional_includes:[ast_type_filename; "RISCVDecodeHelpers.h"]
let () =
  write_c_file !out_directory !sail_hash compressed_decode_logic_filename compressed_dec_str
    ~additional_includes:[ast_type_filename; "RISCVDecodeHelpers.h"]
let () =
  write_c_file !out_directory !sail_hash assembler_filename asm_str
    ~additional_includes:
      [
        ast_type_filename;
        ast2str_tables_filename;
        "RISCVAst2StrHelpers.h";
        "../../SStream.h";
      ]

let () =
  write_c_file !out_directory !sail_hash ast2str_tables_filename tables_str
    ~additional_includes:[ast_type_filename; "../../SStream.h"]

let () = write_c_file !out_directory !sail_hash instr_types_filename instr_types_str

let () =
  write_c_file !out_directory !sail_hash instr_types_mapping_filename instr_types_mapping_str
    ~additional_includes:[instr_types_filename]

(* let () =
  write_c_file !out_directory !sail_hash operands_filename info_str
    ~additional_includes:
      [ast_type_filename; "../../include/capstone/capstone.h"] *)
