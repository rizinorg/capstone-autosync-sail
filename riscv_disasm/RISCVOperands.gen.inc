/*=======================================================================*/
/* This code was generated by the tool auto-sync-sail*/
/* (see https://github.com/rizinorg/capstone-autosync-sail)*/
/* from the sail model of RISC-V*/
/* (see https://github.com/riscv/sail-riscv) @ version
 * dc1155266a1cb6ba2342162601739881b58a1c4e.*/
/* DO NOT MODIFY THIS CODE MANUALLY. ANY MANUAL EDITS ARE OVERWRITTEN.*/
/* ------------------------------------------------------------------- */
/* Copyright Â© 2024-2025 moste00 <ubermenchun@gmail.com>*/
/* SPDX-License-Identifier: BSD-3-Clause*/
/*=======================================================================*/

#ifndef __RISCVOPERANDS_GEN_INC__
#define __RISCVOPERANDS_GEN_INC__
#include <stddef.h>
#include <stdint.h>
#include <string.h>

#include "../../include/capstone/capstone.h"
#include "RISCVAst.gen.inc"
#include "RISCVOperandsHelpers.h"

static void fill_operands(struct ast *tree, cs_riscv_op *ops,
                          uint8_t *op_count) {
  switch (tree->ast_node_type) {
  case RISCV_DIV: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.div.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.div.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.div.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_SRAI_HINT: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_srai_hint);
    ops[0].access = CS_AC_READ | CS_AC_WRITE;
    break;
  }
  case RISCV_AES64ES: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64es.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64es.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64es.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FLTQ_D: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fltq_d.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fltq_d.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_fltq_d.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_SWSP: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_swsp.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_swsp.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_C_FLW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_flw.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_flw.rsc);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_flw.rdc);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_MVXTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.mvxtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.mvxtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.mvxtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VICMPTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vicmptype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_IMM;
    ops[1].imm = tree->ast_node.vicmptype.simm;
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vicmptype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FLEQ_H: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fleq_h.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fleq_h.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_fleq_h.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHA256SIG1: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha256sig1.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha256sig1.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VSHA2MS_VV: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vsha2ms_vv.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vsha2ms_vv.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vsha2ms_vv.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VCPOP_M: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vcpop_m.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vcpop_m.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VVTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vvtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vvtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vvtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_ADDW: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_addw.rsd);
    ops[0].access = CS_AC_READ | CS_AC_WRITE;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_addw.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_C_ADDI4SPN: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_addi4spn.rdc);
    ops[0].access = CS_AC_WRITE;
    ops[1].type = RISCV_OP_IMM;
    ops[1].imm = tree->ast_node.c_addi4spn.nzimm;
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_C_FSD: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_fsd.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_fsd.rsc1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_fsd.rsc2);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_VANDN_VV: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vandn_vv.vs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vandn_vv.vs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vandn_vv.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_AES32DSMI: {
    *op_count = 4;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.aes32dsmi.bs;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes32dsmi.rs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes32dsmi.rs1);
    ops[2].access = CS_AC_READ;
    ops[3].type = RISCV_OP_REG;
    ops[3].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes32dsmi.rd);
    ops[3].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VCLMULH_VV: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vclmulh_vv.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vclmulh_vv.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vclmulh_vv.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_BREV8: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_brev8.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_brev8.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZIMOP_MOP_RR: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zimop_mop_rr.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zimop_mop_rr.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zimop_mop_rr.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VREV8_V: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vrev8_v.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vrev8_v.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHA256SIG0: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha256sig0.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha256sig0.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ILLEGAL: {
    *op_count = 1;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.illegal;
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_VLSEGTYPE: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vlsegtype.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vlsegtype.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VVCMPTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vvcmptype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vvcmptype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vvcmptype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHA512SIG1L: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig1l.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig1l.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig1l.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VWSLL_VV: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vwsll_vv.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vwsll_vv.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vwsll_vv.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_MULW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.mulw.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.mulw.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.mulw.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_ZEXT_H: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_zext_h);
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_WMVVTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.wmvvtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.wmvvtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.wmvvtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_MADD_TYPE_D: {
    *op_count = 4;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_madd_type_d.rs3);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_madd_type_d.rs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.f_madd_type_d.rs1);
    ops[2].access = CS_AC_READ;
    ops[3].type = RISCV_OP_REG;
    ops[3].reg = AS_FLOAT_REG(tree->ast_node.f_madd_type_d.rd);
    ops[3].access = CS_AC_WRITE;
    break;
  }
  case RISCV_RTYPEW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.rtypew.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.rtypew.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.rtypew.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_LBU: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_lbu.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_lbu.rdc);
    ops[1].access = CS_AC_WRITE;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_lbu.rs1c);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_FMVP_D_X: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_fmvp_d_x.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_fmvp_d_x.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.riscv_fmvp_d_x.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_LUI: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_lui.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_lui.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_UN_RM_FF_TYPE_D: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_un_rm_ff_type_d.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_un_rm_ff_type_d.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_SRAI: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_srai.shamt;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_srai.rsd);
    ops[1].access = CS_AC_READ | CS_AC_WRITE;
    break;
  }
  case RISCV_F_BIN_X_TYPE_H: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_bin_x_type_h.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_bin_x_type_h.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_bin_x_type_h.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_EBREAK: {
    *op_count = 0;
    break;
  }
  case RISCV_C_LI: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_li.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_li.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VEXT2TYPE: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vext2type.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vext2type.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_AES64DSM: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64dsm.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64dsm.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64dsm.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FVVMATYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.fvvmatype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.fvvmatype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.fvvmatype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VVMSTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vvmstype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vvmstype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vvmstype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VROL_VV: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vrol_vv.vs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vrol_vv.vs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vrol_vv.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_LOAD_FP: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.load_fp.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.load_fp.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.load_fp.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_BIN_TYPE_F_S: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_bin_type_f_s.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_bin_type_f_s.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.f_bin_type_f_s.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_WVVTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.wvvtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.wvvtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.wvvtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_AMO: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.amo.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.amo.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.amo.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHA512SIG0H: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig0h.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig0h.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig0h.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_SLLI_HINT: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_slli_hint.shamt;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_slli_hint.rsd);
    ops[1].access = CS_AC_READ | CS_AC_WRITE;
    break;
  }
  case RISCV_VSRETYPE: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vsretype.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vsretype.vs3);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_RFVVTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.rfvvtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.rfvvtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.rfvvtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_SRLI: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_srli.shamt;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_srli.rsd);
    ops[1].access = CS_AC_READ | CS_AC_WRITE;
    break;
  }
  case RISCV_FCVTMOD_W_D: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fcvtmod_w_d.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_fcvtmod_w_d.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZBA_RTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zba_rtype.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zba_rtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zba_rtype.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FWVFTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.fwvftype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.fwvftype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.fwvftype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VWSLL_VI: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vwsll_vi.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_IMM;
    ops[1].imm = tree->ast_node.vwsll_vi.uimm;
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vwsll_vi.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VFUNARY1: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vfunary1.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vfunary1.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_MOVETYPEV: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.movetypev.vs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.movetypev.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VFWUNARY0: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vfwunary0.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vfwunary0.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VFNUNARY0: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vfnunary0.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vfnunary0.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_MV_HINT: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_mv_hint);
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_C_FLDSP: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_fldsp.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.c_fldsp.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZBB_RTYPEW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbb_rtypew.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbb_rtypew.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbb_rtypew.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_SB: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_sb.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_sb.rs1c);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_sb.rs2c);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_FLI_S: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.riscv_fli_s.constantidx;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fli_s.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_AES64ESM: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64esm.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64esm.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64esm.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHA512SIG0: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig0.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig0.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FENCE_TSO: {
    *op_count = 0;
    break;
  }
  case RISCV_C_EBREAK: {
    *op_count = 0;
    break;
  }
  case RISCV_REM: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.rem.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.rem.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.rem.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_CLZW: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_clzw.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_clzw.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_UN_RM_XF_TYPE_S: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_un_rm_xf_type_s.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_un_rm_xf_type_s.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_RMVVTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.rmvvtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.rmvvtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.rmvvtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_JALR: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_jalr);
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_STORE_FP: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.store_fp.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.store_fp.rs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.store_fp.rs1);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_F_BIN_X_TYPE_D: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_bin_x_type_d.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_bin_x_type_d.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_bin_x_type_d.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_AES64KS1I: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.aes64ks1i.rnum;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64ks1i.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64ks1i.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FWVVMATYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.fwvvmatype.vs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.fwvvmatype.vs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.fwvvmatype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SRET: {
    *op_count = 0;
    break;
  }
  case RISCV_C_BNEZ: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_bnez.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_bnez.rs);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_C_FSDSP: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_fsdsp.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.c_fsdsp.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_VCLMULH_VX: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vclmulh_vx.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vclmulh_vx.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vclmulh_vx.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VCPOP_V: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vcpop_v.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vcpop_v.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZICOND_RTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zicond_rtype.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zicond_rtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zicond_rtype.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_MOVETYPEX: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.movetypex.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.movetypex.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SINVAL_VMA: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sinval_vma.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sinval_vma.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_VSSEGTYPE: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vssegtype.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vssegtype.vs3);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_F_BIN_RM_TYPE_S: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_bin_rm_type_s.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_bin_rm_type_s.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.f_bin_rm_type_s.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_UN_RM_XF_TYPE_H: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_un_rm_xf_type_h.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_un_rm_xf_type_h.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VVMCTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vvmctype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vvmctype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vvmctype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VBREV8_V: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vbrev8_v.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vbrev8_v.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_LUI_HINT: {
    *op_count = 1;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_lui_hint;
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_FMINM_H: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fminm_h.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fminm_h.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.riscv_fminm_h.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_STORE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.store.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.store.rs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.store.rs1);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_C_FLWSP: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_flwsp.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.c_flwsp.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FENCE: {
    *op_count = 0;
    break;
  }
  case RISCV_VID_V: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vid_v.vd);
    ops[0].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZIMOP_MOP_R: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zimop_mop_r.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zimop_mop_r.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_XOR: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_xor.rsd);
    ops[0].access = CS_AC_READ | CS_AC_WRITE;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_xor.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_ZBS_IOP: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.zbs_iop.shamt;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbs_iop.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbs_iop.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VCLZ_V: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vclz_v.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vclz_v.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHA256SUM0: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha256sum0.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha256sum0.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_UN_F_TYPE_H: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_un_f_type_h.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_un_f_type_h.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FMAXM_H: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fmaxm_h.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fmaxm_h.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.riscv_fmaxm_h.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VCLMUL_VV: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vclmul_vv.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vclmul_vv.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vclmul_vv.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ITYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.itype.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.itype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.itype.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_XPERM8: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_xperm8.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_xperm8.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_xperm8.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_CTZW: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_ctzw.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_ctzw.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FVFMATYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.fvfmatype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.fvfmatype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.fvfmatype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_LD: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_ld.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_ld.rsc);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_ld.rdc);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_ADDIW: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_addiw.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_addiw.rsd);
    ops[1].access = CS_AC_READ | CS_AC_WRITE;
    break;
  }
  case RISCV_MVVTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.mvvtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.mvvtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.mvvtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZBB_EXTOP: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbb_extop.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbb_extop.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_NOT: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_not);
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_NXTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.nxtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.nxtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.nxtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_UN_TYPE_X_S: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_un_type_x_s.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_un_type_x_s.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_JR: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_jr);
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_SFENCE_W_INVAL: {
    *op_count = 0;
    break;
  }
  case RISCV_RORIW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.riscv_roriw.shamt;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_roriw.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_roriw.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SM4KS: {
    *op_count = 4;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.sm4ks.bs;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sm4ks.rs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sm4ks.rs1);
    ops[2].access = CS_AC_READ;
    ops[3].type = RISCV_OP_REG;
    ops[3].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sm4ks.rd);
    ops[3].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZICBOZ: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_zicboz);
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_ZBB_RTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbb_rtype.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbb_rtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbb_rtype.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FROUNDNX_S: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_froundnx_s.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_froundnx_s.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FWVTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.fwvtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.fwvtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.fwvtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VFUNARY0: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vfunary0.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vfunary0.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_SUB: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_sub.rsd);
    ops[0].access = CS_AC_READ | CS_AC_WRITE;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_sub.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_FWFTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.fwftype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.fwftype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.fwftype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_BIN_TYPE_X_S: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_bin_type_x_s.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_bin_type_x_s.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_bin_type_x_s.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZBS_RTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbs_rtype.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbs_rtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbs_rtype.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_SW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_sw.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_sw.rsc1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_sw.rsc2);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_C_FSW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_fsw.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_fsw.rsc1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_fsw.rsc2);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_CPOP: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_cpop.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_cpop.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VBREV_V: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vbrev_v.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vbrev_v.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_LDSP: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_ldsp.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_ldsp.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_WMVXTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.wmvxtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.wmvxtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.wmvxtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VROR_VI: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vror_vi.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_IMM;
    ops[1].imm = tree->ast_node.vror_vi.uimm;
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vror_vi.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHA512SUM1: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sum1.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sum1.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_SEXT_H: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_sext_h);
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_ZIP: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_zip.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_zip.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VFMV: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.vfmv.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vfmv.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_REMW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.remw.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.remw.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.remw.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_MADD_TYPE_S: {
    *op_count = 4;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_madd_type_s.rs3);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_madd_type_s.rs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.f_madd_type_s.rs1);
    ops[2].access = CS_AC_READ;
    ops[3].type = RISCV_OP_REG;
    ops[3].reg = AS_FLOAT_REG(tree->ast_node.f_madd_type_s.rd);
    ops[3].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_ADD_HINT: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_add_hint);
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_F_BIN_RM_TYPE_D: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_bin_rm_type_d.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_bin_rm_type_d.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.f_bin_rm_type_d.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHA512SUM0R: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sum0r.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sum0r.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sum0r.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZBA_RTYPEUW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zba_rtypeuw.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zba_rtypeuw.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zba_rtypeuw.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FMINM_S: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fminm_s.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fminm_s.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.riscv_fminm_s.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHA512SUM0: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sum0.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sum0.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZCMOP: {
    *op_count = 0;
    break;
  }
  case RISCV_C_BEQZ: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_beqz.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_beqz.rs);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_SLLIUW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.riscv_slliuw.shamt;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_slliuw.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_slliuw.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FMVH_X_D: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fmvh_x_d.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_fmvh_x_d.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_AES32ESI: {
    *op_count = 4;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.aes32esi.bs;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes32esi.rs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes32esi.rs1);
    ops[2].access = CS_AC_READ;
    ops[3].type = RISCV_OP_REG;
    ops[3].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes32esi.rd);
    ops[3].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_J: {
    *op_count = 1;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_j;
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_CTZ: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_ctz.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_ctz.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_LOADRES: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.loadres.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.loadres.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_UN_RM_FF_TYPE_H: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_un_rm_ff_type_h.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_un_rm_ff_type_h.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VFMVFS: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vfmvfs.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.vfmvfs.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VIMTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vimtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_IMM;
    ops[1].imm = tree->ast_node.vimtype.simm;
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vimtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_MV: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_mv.rd);
    ops[0].access = CS_AC_WRITE;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_mv.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_C_ZEXT_B: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_zext_b);
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_VLRETYPE: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vlretype.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vlretype.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_DIVW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.divw.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.divw.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.divw.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_AES64IM: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64im.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64im.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHIFTIOP: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.shiftiop.shamt;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.shiftiop.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.shiftiop.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FMINM_D: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fminm_d.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fminm_d.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.riscv_fminm_d.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SM4ED: {
    *op_count = 4;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.sm4ed.bs;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sm4ed.rs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sm4ed.rs1);
    ops[2].access = CS_AC_READ;
    ops[3].type = RISCV_OP_REG;
    ops[3].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sm4ed.rd);
    ops[3].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SM3P0: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sm3p0.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sm3p0.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHA512SIG0L: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig0l.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig0l.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig0l.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_CSRReg: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.csrreg.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.csrreg.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_ADDI16SP: {
    *op_count = 1;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_addi16sp;
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_C_LWSP: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_lwsp.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_lwsp.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FWVFMATYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.fwvfmatype.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.fwvfmatype.vs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.fwvfmatype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_LW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_lw.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_lw.rsc);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_lw.rdc);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_OR: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_or.rsd);
    ops[0].access = CS_AC_READ | CS_AC_WRITE;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_or.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_VEXT8TYPE: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vext8type.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vext8type.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FLTQ_H: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fltq_h.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fltq_h.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_fltq_h.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_MOVETYPEI: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.movetypei.vd);
    ops[0].access = CS_AC_WRITE;
    ops[1].type = RISCV_OP_IMM;
    ops[1].imm = tree->ast_node.movetypei.simm;
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_VFMVSF: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.vfmvsf.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vfmvsf.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_UN_F_TYPE_D: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_un_f_type_d.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_un_f_type_d.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FROUNDNX_H: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_froundnx_h.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_froundnx_h.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FENCEI: {
    *op_count = 0;
    break;
  }
  case RISCV_F_MADD_TYPE_H: {
    *op_count = 4;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_madd_type_h.rs3);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_madd_type_h.rs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.f_madd_type_h.rs1);
    ops[2].access = CS_AC_READ;
    ops[3].type = RISCV_OP_REG;
    ops[3].reg = AS_FLOAT_REG(tree->ast_node.f_madd_type_h.rd);
    ops[3].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VXMTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vxmtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vxmtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vxmtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_AES32ESMI: {
    *op_count = 4;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.aes32esmi.bs;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes32esmi.rs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes32esmi.rs1);
    ops[2].access = CS_AC_READ;
    ops[3].type = RISCV_OP_REG;
    ops[3].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes32esmi.rd);
    ops[3].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_SLLI: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_slli.shamt;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_slli.rsd);
    ops[1].access = CS_AC_READ | CS_AC_WRITE;
    break;
  }
  case RISCV_NISTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.nistype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_IMM;
    ops[1].imm = tree->ast_node.nistype.simm;
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.nistype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FROUND_S: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fround_s.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fround_s.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_NVSTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.nvstype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.nvstype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.nvstype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_STOP_FETCHING: {
    *op_count = 0;
    break;
  }
  case RISCV_F_BIN_F_TYPE_D: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_bin_f_type_d.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_bin_f_type_d.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.f_bin_f_type_d.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_AES64KS2: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64ks2.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64ks2.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64ks2.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_NVTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.nvtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.nvtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.nvtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SFENCE_VMA: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sfence_vma.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sfence_vma.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_C_JAL: {
    *op_count = 1;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_jal;
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_FROUND_H: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fround_h.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fround_h.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VMTYPE: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vmtype.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vmtype.vd_or_vs3);
    ops[1].access = CS_AC_READ | CS_AC_WRITE;
    break;
  }
  case RISCV_FWVVTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.fwvvtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.fwvvtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.fwvvtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_MVVCOMPRESS: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.mvvcompress.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.mvvcompress.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.mvvcompress.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_SH: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_sh.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_sh.rs1c);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_sh.rs2c);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_VSETVL: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vsetvl.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vsetvl.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vsetvl.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VEXT4TYPE: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vext4type.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vext4type.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_SUBW: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_subw.rsd);
    ops[0].access = CS_AC_READ | CS_AC_WRITE;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_subw.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_MMTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.mmtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.mmtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.mmtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VXMCTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vxmctype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vxmctype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vxmctype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_NOP: {
    *op_count = 0;
    break;
  }
  case RISCV_C_SDSP: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_sdsp.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_sdsp.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_WVTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.wvtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.wvtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.wvtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VSOXSEGTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vsoxsegtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vsoxsegtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vsoxsegtype.vs3);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_NXSTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.nxstype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.nxstype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.nxstype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_ANDI: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_andi.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_andi.rsd);
    ops[1].access = CS_AC_READ | CS_AC_WRITE;
    break;
  }
  case RISCV_VLSEGFFTYPE: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vlsegfftype.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vlsegfftype.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_ILLEGAL: {
    *op_count = 1;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_illegal;
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_FMAXM_S: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fmaxm_s.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fmaxm_s.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.riscv_fmaxm_s.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_WVXTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.wvxtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.wvxtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.wvxtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_MRET: {
    *op_count = 0;
    break;
  }
  case RISCV_F_UN_RM_FF_TYPE_S: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_un_rm_ff_type_s.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_un_rm_ff_type_s.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FLEQ_S: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fleq_s.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fleq_s.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_fleq_s.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ADDIW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.addiw.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.addiw.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.addiw.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_CLMUL: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_clmul.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_clmul.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_clmul.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SM3P1: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sm3p1.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sm3p1.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FVFMTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.fvfmtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.fvfmtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.fvfmtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_THREAD_START: {
    *op_count = 0;
    break;
  }
  case RISCV_C_MUL: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_mul.rsdc);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_mul.rs2c);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_MASKTYPEV: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.masktypev.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.masktypev.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.masktypev.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VIMSTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vimstype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_IMM;
    ops[1].imm = tree->ast_node.vimstype.simm;
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vimstype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VIMCTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vimctype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_IMM;
    ops[1].imm = tree->ast_node.vimctype.simm;
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vimctype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ORCB: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_orcb.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_orcb.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VMVSX: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vmvsx.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vmvsx.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FVVMTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.fvvmtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.fvvmtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.fvvmtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_UN_RM_XF_TYPE_D: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_un_rm_xf_type_d.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_un_rm_xf_type_d.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VCTZ_V: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vctz_v.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vctz_v.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZBKB_PACKW: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbkb_packw.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbkb_packw.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbkb_packw.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VANDN_VX: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vandn_vx.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vandn_vx.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vandn_vx.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VSUXSEGTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vsuxsegtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vsuxsegtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vsuxsegtype.vs3);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_SHA256SUM1: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha256sum1.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha256sum1.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_LI_HINT: {
    *op_count = 1;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_li_hint;
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_C_SD: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_sd.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_sd.rsc1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_sd.rsc2);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_FMAXM_D: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fmaxm_d.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fmaxm_d.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.riscv_fmaxm_d.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_CPOPW: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_cpopw.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_cpopw.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FVVTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.fvvtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.fvvtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.fvvtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VSETIVLI: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.vsetivli.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vsetivli.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_MASKTYPEI: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.masktypei.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_IMM;
    ops[1].imm = tree->ast_node.masktypei.simm;
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.masktypei.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FENCE_RESERVED: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.fence_reserved.fm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.fence_reserved.rs);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.fence_reserved.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FROUND_D: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fround_d.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fround_d.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FROUNDNX_D: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_froundnx_d.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_froundnx_d.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_MASKTYPEX: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.masktypex.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.masktypex.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.masktypex.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_ADDI_HINT: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_addi_hint);
    ops[0].access = CS_AC_READ | CS_AC_WRITE;
    break;
  }
  case RISCV_F_UN_RM_FX_TYPE_D: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_un_rm_fx_type_d.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_un_rm_fx_type_d.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FLI_D: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.riscv_fli_d.constantidx;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fli_d.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_MVXMATYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.mvxmatype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.mvxmatype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.mvxmatype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VVMTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vvmtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vvmtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vvmtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_WFI: {
    *op_count = 0;
    break;
  }
  case RISCV_FVFTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.fvftype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.fvftype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.fvftype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_ADD: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_add.rsd);
    ops[0].access = CS_AC_READ | CS_AC_WRITE;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_add.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_NITYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.nitype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_IMM;
    ops[1].imm = tree->ast_node.nitype.simm;
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.nitype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHA512SIG1: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig1.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig1.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZICBOM: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_zicbom.rs1);
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_VCLMUL_VX: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vclmul_vx.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vclmul_vx.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vclmul_vx.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_UNZIP: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_unzip.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_unzip.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHIFTIWOP: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.shiftiwop.shamt;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.shiftiwop.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.shiftiwop.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_FLD: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_fld.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_fld.rsc);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_fld.rdc);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VISG: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.visg.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_IMM;
    ops[1].imm = tree->ast_node.visg.simm;
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.visg.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_UN_RM_FX_TYPE_H: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_un_rm_fx_type_h.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_un_rm_fx_type_h.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZVKSHA2TYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.zvksha2type.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.zvksha2type.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.zvksha2type.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VWSLL_VX: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vwsll_vx.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vwsll_vx.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vwsll_vx.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ZBKB_RTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbkb_rtype.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbkb_rtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.zbkb_rtype.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VMVXS: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vmvxs.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vmvxs.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VMVRTYPE: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vmvrtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vmvrtype.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_STORECON: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.storecon.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.storecon.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.storecon.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VITYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vitype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_IMM;
    ops[1].imm = tree->ast_node.vitype.simm;
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vitype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_FSWSP: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_fswsp.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.c_fswsp.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_F_UN_X_TYPE_D: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_un_x_type_d.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_un_x_type_d.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHA512SUM1R: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sum1r.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sum1r.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sum1r.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VLUXSEGTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vluxsegtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vluxsegtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vluxsegtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_ECALL: {
    *op_count = 0;
    break;
  }
  case RISCV_C_SEXT_B: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_sext_b);
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_JAL: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.riscv_jal.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_jal.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_UN_RM_FX_TYPE_S: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_un_rm_fx_type_s.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_un_rm_fx_type_s.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_LHU: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_lhu.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_lhu.rdc);
    ops[1].access = CS_AC_WRITE;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_lhu.rs1c);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_VSETVLI: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vsetvli.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vsetvli.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_BIN_RM_TYPE_H: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_bin_rm_type_h.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_bin_rm_type_h.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.f_bin_rm_type_h.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_F_UN_X_TYPE_H: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_un_x_type_h.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_un_x_type_h.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VXCMPTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vxcmptype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vxcmptype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vxcmptype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FLI_H: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.riscv_fli_h.constantidx;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fli_h.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_CLMULH: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_clmulh.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_clmulh.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_clmulh.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_UTYPE: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.utype.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.utype.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VXSG: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vxsg.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vxsg.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vxsg.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_CLZ: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_clz.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_clz.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VXMSTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vxmstype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vxmstype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vxmstype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VROR_VV: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vror_vv.vs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vror_vv.vs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vror_vv.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FLTQ_S: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fltq_s.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fltq_s.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_fltq_s.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_CLMULR: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_clmulr.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_clmulr.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_clmulr.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SHA512SIG1H: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig1h.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig1h.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.sha512sig1h.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VROL_VX: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vrol_vx.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vrol_vx.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vrol_vx.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VIOTA_M: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.viota_m.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.viota_m.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VLSSEGTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vlssegtype.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vlssegtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vlssegtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_CSRImm: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.csrimm.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.csrimm.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_LOAD: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.load.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.load.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.load.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VMSIF_M: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vmsif_m.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vmsif_m.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VROR_VX: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vror_vx.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vror_vx.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vror_vx.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_BTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.btype.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.btype.rs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.btype.rs1);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_VXTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vxtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vxtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vxtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VSSSEGTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vsssegtype.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vsssegtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vsssegtype.vs3);
    ops[2].access = CS_AC_READ;
    break;
  }
  case RISCV_RORI: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.riscv_rori.shamt;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_rori.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_rori.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_JALR: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.riscv_jalr.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_jalr.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_jalr.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_FLEQ_D: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.riscv_fleq_d.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.riscv_fleq_d.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_fleq_d.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_AES32DSI: {
    *op_count = 4;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.aes32dsi.bs;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes32dsi.rs2);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes32dsi.rs1);
    ops[2].access = CS_AC_READ;
    ops[3].type = RISCV_OP_REG;
    ops[3].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes32dsi.rd);
    ops[3].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_AND: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_and.rsd);
    ops[0].access = CS_AC_READ | CS_AC_WRITE;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_and.rs2);
    ops[1].access = CS_AC_READ;
    break;
  }
  case RISCV_F_UN_TYPE_F_S: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.f_un_type_f_s.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_un_type_f_s.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VMSOF_M: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vmsof_m.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vmsof_m.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_XPERM4: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_xperm4.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_xperm4.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_xperm4.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_SFENCE_INVAL_IR: {
    *op_count = 0;
    break;
  }
  case RISCV_C_ZEXT_W: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_zext_w);
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_F_BIN_F_TYPE_H: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_FLOAT_REG(tree->ast_node.f_bin_f_type_h.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.f_bin_f_type_h.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_FLOAT_REG(tree->ast_node.f_bin_f_type_h.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_MUL: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.mul.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.mul.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.mul.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_RIVVTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.rivvtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.rivvtype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.rivvtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VFMERGE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vfmerge.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_FLOAT_REG(tree->ast_node.vfmerge.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vfmerge.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_RTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.rtype.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.rtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.rtype.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VLOXSEGTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vloxsegtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vloxsegtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.vloxsegtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_VMSBF_M: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vmsbf_m.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.vmsbf_m.vd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_ADDI: {
    *op_count = 2;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_addi.nzi;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_addi.rsd);
    ops[1].access = CS_AC_READ | CS_AC_WRITE;
    break;
  }
  case RISCV_FENCEI_RESERVED: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.fencei_reserved.imm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.fencei_reserved.rs);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.fencei_reserved.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_AES64DS: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64ds.rs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64ds.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.aes64ds.rd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_MVVMATYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.mvvmatype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_VECTOR_REG(tree->ast_node.mvvmatype.vs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.mvvmatype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_SRLI_HINT: {
    *op_count = 1;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_srli_hint);
    ops[0].access = CS_AC_READ | CS_AC_WRITE;
    break;
  }
  case RISCV_VFIRST_M: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.vfirst_m.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.vfirst_m.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_WXTYPE: {
    *op_count = 3;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_VECTOR_REG(tree->ast_node.wxtype.vs2);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.wxtype.rs1);
    ops[1].access = CS_AC_READ;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_VECTOR_REG(tree->ast_node.wxtype.vd);
    ops[2].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_NOP_HINT: {
    *op_count = 1;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_nop_hint;
    ops[0].access = CS_AC_READ;
    break;
  }
  case RISCV_REV8: {
    *op_count = 2;
    ops[0].type = RISCV_OP_REG;
    ops[0].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_rev8.rs1);
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.riscv_rev8.rd);
    ops[1].access = CS_AC_WRITE;
    break;
  }
  case RISCV_C_LH: {
    *op_count = 3;
    ops[0].type = RISCV_OP_IMM;
    ops[0].imm = tree->ast_node.c_lh.uimm;
    ops[0].access = CS_AC_READ;
    ops[1].type = RISCV_OP_REG;
    ops[1].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_lh.rdc);
    ops[1].access = CS_AC_WRITE;
    ops[2].type = RISCV_OP_REG;
    ops[2].reg = AS_GEN_PURPOSE_REG(tree->ast_node.c_lh.rs1c);
    ops[2].access = CS_AC_READ;
    break;
  }
  }
}
#endif
