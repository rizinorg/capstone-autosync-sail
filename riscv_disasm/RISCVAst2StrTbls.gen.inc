/*=======================================================================*/
/* This code was generated by the tool auto-sync-sail*/
/* (see https://github.com/rizinorg/capstone-autosync-sail)*/
/* from the sail model of RISC-V*/
/* (see https://github.com/riscv/sail-riscv) @ version
 * 0b9c639f19da48734cbf14b61f6ad200b7c70de9.*/
/* DO NOT MODIFY THIS CODE MANUALLY. ANY MANUAL EDITS ARE OVERWRITTEN.*/
/* ------------------------------------------------------------------- */
/* Copyright Â© 2024 moste00 <ubermenchun@gmail.com>*/
/* SPDX-License-Identifier: BSD-3-Clause*/
/*=======================================================================*/

#ifndef __RISCVAST2STRTBLS_GEN_INC__
#define __RISCVAST2STRTBLS_GEN_INC__
#include <stddef.h>
#include <stdint.h>
#include <string.h>

#include "RISCVAst.gen.inc"
#include "SStream.h"

void utype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_LUI: {
    SStream_concat(ss, "lui");
    break;
  }
  case RISCV_AUIPC: {
    SStream_concat(ss, "auipc");
    break;
  }
  }
}
void reg_name(uint64_t member, SStream *ss) {
  switch (member) {
  case 0x08: {
    SStream_concat(ss, "fp");
    break;
  }
  case 0x15: {
    SStream_concat(ss, "s5");
    break;
  }
  case 0x01: {
    SStream_concat(ss, "ra");
    break;
  }
  case 0x06: {
    SStream_concat(ss, "t1");
    break;
  }
  case 0x09: {
    SStream_concat(ss, "s1");
    break;
  }
  case 0x10: {
    SStream_concat(ss, "a6");
    break;
  }
  case 0x1B: {
    SStream_concat(ss, "s11");
    break;
  }
  case 0x1C: {
    SStream_concat(ss, "t3");
    break;
  }
  case 0x16: {
    SStream_concat(ss, "s6");
    break;
  }
  case 0x00: {
    SStream_concat(ss, "zero");
    break;
  }
  case 0x0A: {
    SStream_concat(ss, "a0");
    break;
  }
  case 0x1A: {
    SStream_concat(ss, "s10");
    break;
  }
  case 0x17: {
    SStream_concat(ss, "s7");
    break;
  }
  case 0x0C: {
    SStream_concat(ss, "a2");
    break;
  }
  case 0x18: {
    SStream_concat(ss, "s8");
    break;
  }
  case 0x02: {
    SStream_concat(ss, "sp");
    break;
  }
  case 0x1F: {
    SStream_concat(ss, "t6");
    break;
  }
  case 0x0B: {
    SStream_concat(ss, "a1");
    break;
  }
  case 0x07: {
    SStream_concat(ss, "t2");
    break;
  }
  case 0x13: {
    SStream_concat(ss, "s3");
    break;
  }
  case 0x04: {
    SStream_concat(ss, "tp");
    break;
  }
  case 0x19: {
    SStream_concat(ss, "s9");
    break;
  }
  case 0x12: {
    SStream_concat(ss, "s2");
    break;
  }
  case 0x14: {
    SStream_concat(ss, "s4");
    break;
  }
  case 0x0E: {
    SStream_concat(ss, "a4");
    break;
  }
  case 0x1E: {
    SStream_concat(ss, "t5");
    break;
  }
  case 0x11: {
    SStream_concat(ss, "a7");
    break;
  }
  case 0x03: {
    SStream_concat(ss, "gp");
    break;
  }
  case 0x05: {
    SStream_concat(ss, "t0");
    break;
  }
  case 0x1D: {
    SStream_concat(ss, "t4");
    break;
  }
  case 0x0D: {
    SStream_concat(ss, "a3");
    break;
  }
  case 0x0F: {
    SStream_concat(ss, "a5");
    break;
  }
  }
}
void btype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_BGEU: {
    SStream_concat(ss, "bgeu");
    break;
  }
  case RISCV_BLT: {
    SStream_concat(ss, "blt");
    break;
  }
  case RISCV_BGE: {
    SStream_concat(ss, "bge");
    break;
  }
  case RISCV_BLTU: {
    SStream_concat(ss, "bltu");
    break;
  }
  case RISCV_BNE: {
    SStream_concat(ss, "bne");
    break;
  }
  case RISCV_BEQ: {
    SStream_concat(ss, "beq");
    break;
  }
  }
}
void itype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_ANDI: {
    SStream_concat(ss, "andi");
    break;
  }
  case RISCV_ADDI: {
    SStream_concat(ss, "addi");
    break;
  }
  case RISCV_XORI: {
    SStream_concat(ss, "xori");
    break;
  }
  case RISCV_SLTI: {
    SStream_concat(ss, "slti");
    break;
  }
  case RISCV_ORI: {
    SStream_concat(ss, "ori");
    break;
  }
  case RISCV_SLTIU: {
    SStream_concat(ss, "sltiu");
    break;
  }
  }
}
void shiftiop_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_SRAI: {
    SStream_concat(ss, "srai");
    break;
  }
  case RISCV_SRLI: {
    SStream_concat(ss, "srli");
    break;
  }
  case RISCV_SLLI: {
    SStream_concat(ss, "slli");
    break;
  }
  }
}
void rtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_SLL: {
    SStream_concat(ss, "sll");
    break;
  }
  case RISCV_SRL: {
    SStream_concat(ss, "srl");
    break;
  }
  case RISCV_SLTU: {
    SStream_concat(ss, "sltu");
    break;
  }
  case RISCV_ADD: {
    SStream_concat(ss, "add");
    break;
  }
  case RISCV_XOR: {
    SStream_concat(ss, "xor");
    break;
  }
  case RISCV_SLT: {
    SStream_concat(ss, "slt");
    break;
  }
  case RISCV_AND: {
    SStream_concat(ss, "and");
    break;
  }
  case RISCV_OR: {
    SStream_concat(ss, "or");
    break;
  }
  case RISCV_SRA: {
    SStream_concat(ss, "sra");
    break;
  }
  case RISCV_SUB: {
    SStream_concat(ss, "sub");
    break;
  }
  }
}
void size_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_BYTE: {
    SStream_concat(ss, "b");
    break;
  }
  case RISCV_WORD: {
    SStream_concat(ss, "w");
    break;
  }
  case RISCV_DOUBLE: {
    SStream_concat(ss, "d");
    break;
  }
  case RISCV_HALF: {
    SStream_concat(ss, "h");
    break;
  }
  }
}
void rtypew_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_SRAW: {
    SStream_concat(ss, "sraw");
    break;
  }
  case RISCV_SUBW: {
    SStream_concat(ss, "subw");
    break;
  }
  case RISCV_SLLW: {
    SStream_concat(ss, "sllw");
    break;
  }
  case RISCV_SRLW: {
    SStream_concat(ss, "srlw");
    break;
  }
  case RISCV_ADDW: {
    SStream_concat(ss, "addw");
    break;
  }
  }
}
void shiftiwop_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_SRLIW: {
    SStream_concat(ss, "srliw");
    break;
  }
  case RISCV_SLLIW: {
    SStream_concat(ss, "slliw");
    break;
  }
  case RISCV_SRAIW: {
    SStream_concat(ss, "sraiw");
    break;
  }
  }
}
void amo_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_AMOMIN: {
    SStream_concat(ss, "amomin");
    break;
  }
  case RISCV_AMOXOR: {
    SStream_concat(ss, "amoxor");
    break;
  }
  case RISCV_AMOADD: {
    SStream_concat(ss, "amoadd");
    break;
  }
  case RISCV_AMOOR: {
    SStream_concat(ss, "amoor");
    break;
  }
  case RISCV_AMOSWAP: {
    SStream_concat(ss, "amoswap");
    break;
  }
  case RISCV_AMOMAX: {
    SStream_concat(ss, "amomax");
    break;
  }
  case RISCV_AMOMINU: {
    SStream_concat(ss, "amominu");
    break;
  }
  case RISCV_AMOAND: {
    SStream_concat(ss, "amoand");
    break;
  }
  case RISCV_AMOMAXU: {
    SStream_concat(ss, "amomaxu");
    break;
  }
  }
}
void creg_name(uint64_t member, SStream *ss) {
  switch (member) {
  case 0x7: {
    SStream_concat(ss, "a5");
    break;
  }
  case 0x5: {
    SStream_concat(ss, "a3");
    break;
  }
  case 0x1: {
    SStream_concat(ss, "s1");
    break;
  }
  case 0x3: {
    SStream_concat(ss, "a1");
    break;
  }
  case 0x2: {
    SStream_concat(ss, "a0");
    break;
  }
  case 0x4: {
    SStream_concat(ss, "a2");
    break;
  }
  case 0x6: {
    SStream_concat(ss, "a4");
    break;
  }
  case 0x0: {
    SStream_concat(ss, "s0");
    break;
  }
  }
}
void csr_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_CSRRS: {
    SStream_concat(ss, "csrrs");
    break;
  }
  case RISCV_CSRRW: {
    SStream_concat(ss, "csrrw");
    break;
  }
  case RISCV_CSRRC: {
    SStream_concat(ss, "csrrc");
    break;
  }
  }
}
void freg_name(uint64_t member, SStream *ss) {
  switch (member) {
  case 0x08: {
    SStream_concat(ss, "fs0");
    break;
  }
  case 0x15: {
    SStream_concat(ss, "fs5");
    break;
  }
  case 0x01: {
    SStream_concat(ss, "ft1");
    break;
  }
  case 0x06: {
    SStream_concat(ss, "ft6");
    break;
  }
  case 0x09: {
    SStream_concat(ss, "fs1");
    break;
  }
  case 0x10: {
    SStream_concat(ss, "fa6");
    break;
  }
  case 0x1B: {
    SStream_concat(ss, "fs11");
    break;
  }
  case 0x1C: {
    SStream_concat(ss, "ft8");
    break;
  }
  case 0x16: {
    SStream_concat(ss, "fs6");
    break;
  }
  case 0x00: {
    SStream_concat(ss, "ft0");
    break;
  }
  case 0x0A: {
    SStream_concat(ss, "fa0");
    break;
  }
  case 0x1A: {
    SStream_concat(ss, "fs10");
    break;
  }
  case 0x17: {
    SStream_concat(ss, "fs7");
    break;
  }
  case 0x0C: {
    SStream_concat(ss, "fa2");
    break;
  }
  case 0x18: {
    SStream_concat(ss, "fs8");
    break;
  }
  case 0x02: {
    SStream_concat(ss, "ft2");
    break;
  }
  case 0x1F: {
    SStream_concat(ss, "ft11");
    break;
  }
  case 0x0B: {
    SStream_concat(ss, "fa1");
    break;
  }
  case 0x07: {
    SStream_concat(ss, "ft7");
    break;
  }
  case 0x13: {
    SStream_concat(ss, "fs3");
    break;
  }
  case 0x04: {
    SStream_concat(ss, "ft4");
    break;
  }
  case 0x19: {
    SStream_concat(ss, "fs9");
    break;
  }
  case 0x12: {
    SStream_concat(ss, "fs2");
    break;
  }
  case 0x14: {
    SStream_concat(ss, "fs4");
    break;
  }
  case 0x0E: {
    SStream_concat(ss, "fa4");
    break;
  }
  case 0x1E: {
    SStream_concat(ss, "ft10");
    break;
  }
  case 0x11: {
    SStream_concat(ss, "fa7");
    break;
  }
  case 0x03: {
    SStream_concat(ss, "ft3");
    break;
  }
  case 0x05: {
    SStream_concat(ss, "ft5");
    break;
  }
  case 0x1D: {
    SStream_concat(ss, "ft9");
    break;
  }
  case 0x0D: {
    SStream_concat(ss, "fa3");
    break;
  }
  case 0x0F: {
    SStream_concat(ss, "fa5");
    break;
  }
  }
}
void f_madd_type_mnemonic_S(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FMADD_S: {
    SStream_concat(ss, "fmadd.s");
    break;
  }
  case RISCV_FNMADD_S: {
    SStream_concat(ss, "fnmadd.s");
    break;
  }
  case RISCV_FNMSUB_S: {
    SStream_concat(ss, "fnmsub.s");
    break;
  }
  case RISCV_FMSUB_S: {
    SStream_concat(ss, "fmsub.s");
    break;
  }
  }
}
void frm_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_RM_RNE: {
    SStream_concat(ss, "rne");
    break;
  }
  case RISCV_RM_RTZ: {
    SStream_concat(ss, "rtz");
    break;
  }
  case RISCV_RM_RDN: {
    SStream_concat(ss, "rdn");
    break;
  }
  case RISCV_RM_RMM: {
    SStream_concat(ss, "rmm");
    break;
  }
  case RISCV_RM_RUP: {
    SStream_concat(ss, "rup");
    break;
  }
  case RISCV_RM_DYN: {
    SStream_concat(ss, "dyn");
    break;
  }
  }
}
void f_bin_rm_type_mnemonic_S(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FDIV_S: {
    SStream_concat(ss, "fdiv.s");
    break;
  }
  case RISCV_FADD_S: {
    SStream_concat(ss, "fadd.s");
    break;
  }
  case RISCV_FMUL_S: {
    SStream_concat(ss, "fmul.s");
    break;
  }
  case RISCV_FSUB_S: {
    SStream_concat(ss, "fsub.s");
    break;
  }
  }
}
void f_madd_type_mnemonic_D(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FMSUB_D: {
    SStream_concat(ss, "fmsub.d");
    break;
  }
  case RISCV_FNMSUB_D: {
    SStream_concat(ss, "fnmsub.d");
    break;
  }
  case RISCV_FNMADD_D: {
    SStream_concat(ss, "fnmadd.d");
    break;
  }
  case RISCV_FMADD_D: {
    SStream_concat(ss, "fmadd.d");
    break;
  }
  }
}
void f_bin_rm_type_mnemonic_D(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FMUL_D: {
    SStream_concat(ss, "fmul.d");
    break;
  }
  case RISCV_FADD_D: {
    SStream_concat(ss, "fadd.d");
    break;
  }
  case RISCV_FSUB_D: {
    SStream_concat(ss, "fsub.d");
    break;
  }
  case RISCV_FDIV_D: {
    SStream_concat(ss, "fdiv.d");
    break;
  }
  }
}
void zba_rtypeuw_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_SH1ADDUW: {
    SStream_concat(ss, "sh1add.uw");
    break;
  }
  case RISCV_SH2ADDUW: {
    SStream_concat(ss, "sh2add.uw");
    break;
  }
  case RISCV_ADDUW: {
    SStream_concat(ss, "add.uw");
    break;
  }
  case RISCV_SH3ADDUW: {
    SStream_concat(ss, "sh3add.uw");
    break;
  }
  }
}
void zba_rtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_SH3ADD: {
    SStream_concat(ss, "sh3add");
    break;
  }
  case RISCV_SH2ADD: {
    SStream_concat(ss, "sh2add");
    break;
  }
  case RISCV_SH1ADD: {
    SStream_concat(ss, "sh1add");
    break;
  }
  }
}
void zbb_rtypew_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_RORW: {
    SStream_concat(ss, "rorw");
    break;
  }
  case RISCV_ROLW: {
    SStream_concat(ss, "rolw");
    break;
  }
  }
}
void zbb_rtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_ROR: {
    SStream_concat(ss, "ror");
    break;
  }
  case RISCV_MAXU: {
    SStream_concat(ss, "maxu");
    break;
  }
  case RISCV_MIN: {
    SStream_concat(ss, "min");
    break;
  }
  case RISCV_MAX: {
    SStream_concat(ss, "max");
    break;
  }
  case RISCV_ANDN: {
    SStream_concat(ss, "andn");
    break;
  }
  case RISCV_ORN: {
    SStream_concat(ss, "orn");
    break;
  }
  case RISCV_XNOR: {
    SStream_concat(ss, "xnor");
    break;
  }
  case RISCV_MINU: {
    SStream_concat(ss, "minu");
    break;
  }
  case RISCV_ROL: {
    SStream_concat(ss, "rol");
    break;
  }
  }
}
void zbb_extop_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_SEXTH: {
    SStream_concat(ss, "sext.h");
    break;
  }
  case RISCV_ZEXTH: {
    SStream_concat(ss, "zext.h");
    break;
  }
  case RISCV_SEXTB: {
    SStream_concat(ss, "sext.b");
    break;
  }
  }
}
void zbs_iop_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_BCLRI: {
    SStream_concat(ss, "bclri");
    break;
  }
  case RISCV_BINVI: {
    SStream_concat(ss, "binvi");
    break;
  }
  case RISCV_BSETI: {
    SStream_concat(ss, "bseti");
    break;
  }
  case RISCV_BEXTI: {
    SStream_concat(ss, "bexti");
    break;
  }
  }
}
void zbs_rtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_BEXT: {
    SStream_concat(ss, "bext");
    break;
  }
  case RISCV_BINV: {
    SStream_concat(ss, "binv");
    break;
  }
  case RISCV_BSET: {
    SStream_concat(ss, "bset");
    break;
  }
  case RISCV_BCLR: {
    SStream_concat(ss, "bclr");
    break;
  }
  }
}
void f_bin_rm_type_mnemonic_H(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FDIV_H: {
    SStream_concat(ss, "fdiv.h");
    break;
  }
  case RISCV_FADD_H: {
    SStream_concat(ss, "fadd.h");
    break;
  }
  case RISCV_FMUL_H: {
    SStream_concat(ss, "fmul.h");
    break;
  }
  case RISCV_FSUB_H: {
    SStream_concat(ss, "fsub.h");
    break;
  }
  }
}
void f_madd_type_mnemonic_H(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FNMSUB_H: {
    SStream_concat(ss, "fnmsub.h");
    break;
  }
  case RISCV_FMSUB_H: {
    SStream_concat(ss, "fmsub.h");
    break;
  }
  case RISCV_FNMADD_H: {
    SStream_concat(ss, "fnmadd.h");
    break;
  }
  case RISCV_FMADD_H: {
    SStream_concat(ss, "fmadd.h");
    break;
  }
  }
}
void zbkb_rtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_PACKH: {
    SStream_concat(ss, "packh");
    break;
  }
  case RISCV_PACK: {
    SStream_concat(ss, "pack");
    break;
  }
  }
}
void zicond_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_CZERO_EQZ: {
    SStream_concat(ss, "czero.eqz");
    break;
  }
  case RISCV_CZERO_NEZ: {
    SStream_concat(ss, "czero.nez");
    break;
  }
  }
}
void sew_flag(uint64_t member, SStream *ss) {
  switch (member) {
  case 0x1: {
    SStream_concat(ss, "e16");
    break;
  }
  case 0x3: {
    SStream_concat(ss, "e64");
    break;
  }
  case 0x2: {
    SStream_concat(ss, "e32");
    break;
  }
  case 0x0: {
    SStream_concat(ss, "e8");
    break;
  }
  }
}
void vvtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VV_VSSRA: {
    SStream_concat(ss, "vssra.vv");
    break;
  }
  case RISCV_VV_VXOR: {
    SStream_concat(ss, "vxor.vv");
    break;
  }
  case RISCV_VV_VSMUL: {
    SStream_concat(ss, "vsmul.vv");
    break;
  }
  case RISCV_VV_VAND: {
    SStream_concat(ss, "vand.vv");
    break;
  }
  case RISCV_VV_VSSUB: {
    SStream_concat(ss, "vssub.vv");
    break;
  }
  case RISCV_VV_VSUB: {
    SStream_concat(ss, "vsub.vv");
    break;
  }
  case RISCV_VV_VSLL: {
    SStream_concat(ss, "vsll.vv");
    break;
  }
  case RISCV_VV_VSSRL: {
    SStream_concat(ss, "vssrl.vv");
    break;
  }
  case RISCV_VV_VSADD: {
    SStream_concat(ss, "vsadd.vv");
    break;
  }
  case RISCV_VV_VSSUBU: {
    SStream_concat(ss, "vssubu.vv");
    break;
  }
  case RISCV_VV_VMAX: {
    SStream_concat(ss, "vmax.vv");
    break;
  }
  case RISCV_VV_VADD: {
    SStream_concat(ss, "vadd.vv");
    break;
  }
  case RISCV_VV_VSRL: {
    SStream_concat(ss, "vsrl.vv");
    break;
  }
  case RISCV_VV_VMAXU: {
    SStream_concat(ss, "vmaxu.vv");
    break;
  }
  case RISCV_VV_VRGATHER: {
    SStream_concat(ss, "vrgather.vv");
    break;
  }
  case RISCV_VV_VSRA: {
    SStream_concat(ss, "vsra.vv");
    break;
  }
  case RISCV_VV_VRGATHEREI16: {
    SStream_concat(ss, "vrgatherei16.vv");
    break;
  }
  case RISCV_VV_VMINU: {
    SStream_concat(ss, "vminu.vv");
    break;
  }
  case RISCV_VV_VSADDU: {
    SStream_concat(ss, "vsaddu.vv");
    break;
  }
  case RISCV_VV_VMIN: {
    SStream_concat(ss, "vmin.vv");
    break;
  }
  case RISCV_VV_VOR: {
    SStream_concat(ss, "vor.vv");
    break;
  }
  }
}
void vreg_name(uint64_t member, SStream *ss) {
  switch (member) {
  case 0x08: {
    SStream_concat(ss, "v8");
    break;
  }
  case 0x15: {
    SStream_concat(ss, "v21");
    break;
  }
  case 0x01: {
    SStream_concat(ss, "v1");
    break;
  }
  case 0x06: {
    SStream_concat(ss, "v6");
    break;
  }
  case 0x09: {
    SStream_concat(ss, "v9");
    break;
  }
  case 0x10: {
    SStream_concat(ss, "v16");
    break;
  }
  case 0x1B: {
    SStream_concat(ss, "v27");
    break;
  }
  case 0x1C: {
    SStream_concat(ss, "v28");
    break;
  }
  case 0x16: {
    SStream_concat(ss, "v22");
    break;
  }
  case 0x00: {
    SStream_concat(ss, "v0");
    break;
  }
  case 0x0A: {
    SStream_concat(ss, "v10");
    break;
  }
  case 0x1A: {
    SStream_concat(ss, "v26");
    break;
  }
  case 0x17: {
    SStream_concat(ss, "v23");
    break;
  }
  case 0x0C: {
    SStream_concat(ss, "v12");
    break;
  }
  case 0x18: {
    SStream_concat(ss, "v24");
    break;
  }
  case 0x02: {
    SStream_concat(ss, "v2");
    break;
  }
  case 0x1F: {
    SStream_concat(ss, "v31");
    break;
  }
  case 0x0B: {
    SStream_concat(ss, "v11");
    break;
  }
  case 0x07: {
    SStream_concat(ss, "v7");
    break;
  }
  case 0x13: {
    SStream_concat(ss, "v19");
    break;
  }
  case 0x04: {
    SStream_concat(ss, "v4");
    break;
  }
  case 0x19: {
    SStream_concat(ss, "v25");
    break;
  }
  case 0x12: {
    SStream_concat(ss, "v18");
    break;
  }
  case 0x14: {
    SStream_concat(ss, "v20");
    break;
  }
  case 0x0E: {
    SStream_concat(ss, "v14");
    break;
  }
  case 0x1E: {
    SStream_concat(ss, "v30");
    break;
  }
  case 0x11: {
    SStream_concat(ss, "v17");
    break;
  }
  case 0x03: {
    SStream_concat(ss, "v3");
    break;
  }
  case 0x05: {
    SStream_concat(ss, "v5");
    break;
  }
  case 0x1D: {
    SStream_concat(ss, "v29");
    break;
  }
  case 0x0D: {
    SStream_concat(ss, "v13");
    break;
  }
  case 0x0F: {
    SStream_concat(ss, "v15");
    break;
  }
  }
}
void nvstype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_NVS_VNSRL: {
    SStream_concat(ss, "vnsrl.wv");
    break;
  }
  case RISCV_NVS_VNSRA: {
    SStream_concat(ss, "vnsra.wv");
    break;
  }
  }
}
void nvtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_NV_VNCLIP: {
    SStream_concat(ss, "vnclip.wv");
    break;
  }
  case RISCV_NV_VNCLIPU: {
    SStream_concat(ss, "vnclipu.wv");
    break;
  }
  }
}
void vxtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VX_VSRA: {
    SStream_concat(ss, "vsra.vx");
    break;
  }
  case RISCV_VX_VOR: {
    SStream_concat(ss, "vor.vx");
    break;
  }
  case RISCV_VX_VADD: {
    SStream_concat(ss, "vadd.vx");
    break;
  }
  case RISCV_VX_VSADDU: {
    SStream_concat(ss, "vsaddu.vx");
    break;
  }
  case RISCV_VX_VMAX: {
    SStream_concat(ss, "vmax.vx");
    break;
  }
  case RISCV_VX_VSSRA: {
    SStream_concat(ss, "vssra.vx");
    break;
  }
  case RISCV_VX_VXOR: {
    SStream_concat(ss, "vxor.vx");
    break;
  }
  case RISCV_VX_VSSRL: {
    SStream_concat(ss, "vssrl.vx");
    break;
  }
  case RISCV_VX_VRSUB: {
    SStream_concat(ss, "vrsub.vx");
    break;
  }
  case RISCV_VX_VSUB: {
    SStream_concat(ss, "vsub.vx");
    break;
  }
  case RISCV_VX_VSADD: {
    SStream_concat(ss, "vsadd.vx");
    break;
  }
  case RISCV_VX_VSSUBU: {
    SStream_concat(ss, "vssubu.vx");
    break;
  }
  case RISCV_VX_VMIN: {
    SStream_concat(ss, "vmin.vx");
    break;
  }
  case RISCV_VX_VSLL: {
    SStream_concat(ss, "vsll.vx");
    break;
  }
  case RISCV_VX_VSMUL: {
    SStream_concat(ss, "vsmul.vx");
    break;
  }
  case RISCV_VX_VMINU: {
    SStream_concat(ss, "vminu.vx");
    break;
  }
  case RISCV_VX_VMAXU: {
    SStream_concat(ss, "vmaxu.vx");
    break;
  }
  case RISCV_VX_VAND: {
    SStream_concat(ss, "vand.vx");
    break;
  }
  case RISCV_VX_VSSUB: {
    SStream_concat(ss, "vssub.vx");
    break;
  }
  case RISCV_VX_VSRL: {
    SStream_concat(ss, "vsrl.vx");
    break;
  }
  }
}
void nxstype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_NXS_VNSRA: {
    SStream_concat(ss, "vnsra.wx");
    break;
  }
  case RISCV_NXS_VNSRL: {
    SStream_concat(ss, "vnsrl.wx");
    break;
  }
  }
}
void nxtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_NX_VNCLIP: {
    SStream_concat(ss, "vnclip.wx");
    break;
  }
  case RISCV_NX_VNCLIPU: {
    SStream_concat(ss, "vnclipu.wx");
    break;
  }
  }
}
void vxsg_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VX_VSLIDEDOWN: {
    SStream_concat(ss, "vslidedown.vx");
    break;
  }
  case RISCV_VX_VSLIDEUP: {
    SStream_concat(ss, "vslideup.vx");
    break;
  }
  case RISCV_VX_VRGATHER: {
    SStream_concat(ss, "vrgather.vx");
    break;
  }
  }
}
void vitype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VI_VSRL: {
    SStream_concat(ss, "vsrl.vi");
    break;
  }
  case RISCV_VI_VAND: {
    SStream_concat(ss, "vand.vi");
    break;
  }
  case RISCV_VI_VXOR: {
    SStream_concat(ss, "vxor.vi");
    break;
  }
  case RISCV_VI_VSADD: {
    SStream_concat(ss, "vsadd.vi");
    break;
  }
  case RISCV_VI_VSRA: {
    SStream_concat(ss, "vsra.vi");
    break;
  }
  case RISCV_VI_VSSRL: {
    SStream_concat(ss, "vssrl.vi");
    break;
  }
  case RISCV_VI_VSADDU: {
    SStream_concat(ss, "vsaddu.vi");
    break;
  }
  case RISCV_VI_VSLL: {
    SStream_concat(ss, "vsll.vi");
    break;
  }
  case RISCV_VI_VRSUB: {
    SStream_concat(ss, "vrsub.vi");
    break;
  }
  case RISCV_VI_VADD: {
    SStream_concat(ss, "vadd.vi");
    break;
  }
  case RISCV_VI_VOR: {
    SStream_concat(ss, "vor.vi");
    break;
  }
  case RISCV_VI_VSSRA: {
    SStream_concat(ss, "vssra.vi");
    break;
  }
  }
}
void nistype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_NIS_VNSRL: {
    SStream_concat(ss, "vnsrl.wi");
    break;
  }
  case RISCV_NIS_VNSRA: {
    SStream_concat(ss, "vnsra.wi");
    break;
  }
  }
}
void nitype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_NI_VNCLIPU: {
    SStream_concat(ss, "vnclipu.wi");
    break;
  }
  case RISCV_NI_VNCLIP: {
    SStream_concat(ss, "vnclip.wi");
    break;
  }
  }
}
void visg_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VI_VRGATHER: {
    SStream_concat(ss, "vrgather.vi");
    break;
  }
  case RISCV_VI_VSLIDEDOWN: {
    SStream_concat(ss, "vslidedown.vi");
    break;
  }
  case RISCV_VI_VSLIDEUP: {
    SStream_concat(ss, "vslideup.vi");
    break;
  }
  }
}
void simm_string(uint64_t member, SStream *ss) {
  switch (member) {
  case 0x01: {
    SStream_concat(ss, "2");
    break;
  }
  case 0x07: {
    SStream_concat(ss, "8");
    break;
  }
  case 0x00: {
    SStream_concat(ss, "1");
    break;
  }
  case 0x03: {
    SStream_concat(ss, "4");
    break;
  }
  }
}
void mvvtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_MVV_VDIV: {
    SStream_concat(ss, "vdiv.vv");
    break;
  }
  case RISCV_MVV_VREMU: {
    SStream_concat(ss, "vremu.vv");
    break;
  }
  case RISCV_MVV_VAADDU: {
    SStream_concat(ss, "vaaddu.vv");
    break;
  }
  case RISCV_MVV_VMULHSU: {
    SStream_concat(ss, "vmulhsu.vv");
    break;
  }
  case RISCV_MVV_VASUB: {
    SStream_concat(ss, "vasub.vv");
    break;
  }
  case RISCV_MVV_VMULHU: {
    SStream_concat(ss, "vmulhu.vv");
    break;
  }
  case RISCV_MVV_VDIVU: {
    SStream_concat(ss, "vdivu.vv");
    break;
  }
  case RISCV_MVV_VMULH: {
    SStream_concat(ss, "vmulh.vv");
    break;
  }
  case RISCV_MVV_VAADD: {
    SStream_concat(ss, "vaadd.vv");
    break;
  }
  case RISCV_MVV_VMUL: {
    SStream_concat(ss, "vmul.vv");
    break;
  }
  case RISCV_MVV_VREM: {
    SStream_concat(ss, "vrem.vv");
    break;
  }
  case RISCV_MVV_VASUBU: {
    SStream_concat(ss, "vasubu.vv");
    break;
  }
  }
}
void mvvmatype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_MVV_VMACC: {
    SStream_concat(ss, "vmacc.vv");
    break;
  }
  case RISCV_MVV_VNMSUB: {
    SStream_concat(ss, "vnmsub.vv");
    break;
  }
  case RISCV_MVV_VNMSAC: {
    SStream_concat(ss, "vnmsac.vv");
    break;
  }
  case RISCV_MVV_VMADD: {
    SStream_concat(ss, "vmadd.vv");
    break;
  }
  }
}
void wvvtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_WVV_VSUBU: {
    SStream_concat(ss, "vwsubu.vv");
    break;
  }
  case RISCV_WVV_VWMULSU: {
    SStream_concat(ss, "vwmulsu.vv");
    break;
  }
  case RISCV_WVV_VADD: {
    SStream_concat(ss, "vwadd.vv");
    break;
  }
  case RISCV_WVV_VWMUL: {
    SStream_concat(ss, "vwmul.vv");
    break;
  }
  case RISCV_WVV_VADDU: {
    SStream_concat(ss, "vwaddu.vv");
    break;
  }
  case RISCV_WVV_VWMULU: {
    SStream_concat(ss, "vwmulu.vv");
    break;
  }
  case RISCV_WVV_VSUB: {
    SStream_concat(ss, "vwsub.vv");
    break;
  }
  }
}
void wvtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_WV_VSUB: {
    SStream_concat(ss, "vwsub.wv");
    break;
  }
  case RISCV_WV_VADDU: {
    SStream_concat(ss, "vwaddu.wv");
    break;
  }
  case RISCV_WV_VSUBU: {
    SStream_concat(ss, "vwsubu.wv");
    break;
  }
  case RISCV_WV_VADD: {
    SStream_concat(ss, "vwadd.wv");
    break;
  }
  }
}
void wmvvtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_WMVV_VWMACCU: {
    SStream_concat(ss, "vwmaccu.vv");
    break;
  }
  case RISCV_WMVV_VWMACCSU: {
    SStream_concat(ss, "vwmaccsu.vv");
    break;
  }
  case RISCV_WMVV_VWMACC: {
    SStream_concat(ss, "vwmacc.vv");
    break;
  }
  }
}
void vext2type_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VEXT2_SVF2: {
    SStream_concat(ss, "vsext.vf2");
    break;
  }
  case RISCV_VEXT2_ZVF2: {
    SStream_concat(ss, "vzext.vf2");
    break;
  }
  }
}
void vext4type_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VEXT4_ZVF4: {
    SStream_concat(ss, "vzext.vf4");
    break;
  }
  case RISCV_VEXT4_SVF4: {
    SStream_concat(ss, "vsext.vf4");
    break;
  }
  }
}
void vext8type_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VEXT8_SVF8: {
    SStream_concat(ss, "vsext.vf8");
    break;
  }
  case RISCV_VEXT8_ZVF8: {
    SStream_concat(ss, "vzext.vf8");
    break;
  }
  }
}
void mvxtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_MVX_VMUL: {
    SStream_concat(ss, "vmul.vx");
    break;
  }
  case RISCV_MVX_VREM: {
    SStream_concat(ss, "vrem.vx");
    break;
  }
  case RISCV_MVX_VMULH: {
    SStream_concat(ss, "vmulh.vx");
    break;
  }
  case RISCV_MVX_VDIV: {
    SStream_concat(ss, "vdiv.vx");
    break;
  }
  case RISCV_MVX_VAADDU: {
    SStream_concat(ss, "vaaddu.vx");
    break;
  }
  case RISCV_MVX_VSLIDE1DOWN: {
    SStream_concat(ss, "vslide1down.vx");
    break;
  }
  case RISCV_MVX_VMULHSU: {
    SStream_concat(ss, "vmulhsu.vx");
    break;
  }
  case RISCV_MVX_VSLIDE1UP: {
    SStream_concat(ss, "vslide1up.vx");
    break;
  }
  case RISCV_MVX_VMULHU: {
    SStream_concat(ss, "vmulhu.vx");
    break;
  }
  case RISCV_MVX_VASUBU: {
    SStream_concat(ss, "vasubu.vx");
    break;
  }
  case RISCV_MVX_VREMU: {
    SStream_concat(ss, "vremu.vx");
    break;
  }
  case RISCV_MVX_VDIVU: {
    SStream_concat(ss, "vdivu.vx");
    break;
  }
  case RISCV_MVX_VAADD: {
    SStream_concat(ss, "vaadd.vx");
    break;
  }
  case RISCV_MVX_VASUB: {
    SStream_concat(ss, "vasub.vx");
    break;
  }
  }
}
void mvxmatype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_MVX_VNMSAC: {
    SStream_concat(ss, "vnmsac.vx");
    break;
  }
  case RISCV_MVX_VMADD: {
    SStream_concat(ss, "vmadd.vx");
    break;
  }
  case RISCV_MVX_VMACC: {
    SStream_concat(ss, "vmacc.vx");
    break;
  }
  case RISCV_MVX_VNMSUB: {
    SStream_concat(ss, "vnmsub.vx");
    break;
  }
  }
}
void wvxtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_WVX_VSUB: {
    SStream_concat(ss, "vwsub.vx");
    break;
  }
  case RISCV_WVX_VADDU: {
    SStream_concat(ss, "vwaddu.vx");
    break;
  }
  case RISCV_WVX_VADD: {
    SStream_concat(ss, "vwadd.vx");
    break;
  }
  case RISCV_WVX_VSUBU: {
    SStream_concat(ss, "vwsubu.vx");
    break;
  }
  case RISCV_WVX_VWMULSU: {
    SStream_concat(ss, "vwmulsu.vx");
    break;
  }
  case RISCV_WVX_VWMUL: {
    SStream_concat(ss, "vwmul.vx");
    break;
  }
  case RISCV_WVX_VWMULU: {
    SStream_concat(ss, "vwmulu.vx");
    break;
  }
  }
}
void wxtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_WX_VSUB: {
    SStream_concat(ss, "vwsub.wx");
    break;
  }
  case RISCV_WX_VSUBU: {
    SStream_concat(ss, "vwsubu.wx");
    break;
  }
  case RISCV_WX_VADD: {
    SStream_concat(ss, "vwadd.wx");
    break;
  }
  case RISCV_WX_VADDU: {
    SStream_concat(ss, "vwaddu.wx");
    break;
  }
  }
}
void wmvxtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_WMVX_VWMACCU: {
    SStream_concat(ss, "vwmaccu.vx");
    break;
  }
  case RISCV_WMVX_VWMACCSU: {
    SStream_concat(ss, "vwmaccsu.vx");
    break;
  }
  case RISCV_WMVX_VWMACCUS: {
    SStream_concat(ss, "vwmaccus.vx");
    break;
  }
  case RISCV_WMVX_VWMACC: {
    SStream_concat(ss, "vwmacc.vx");
    break;
  }
  }
}
void fvvtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FVV_VSGNJ: {
    SStream_concat(ss, "vfsgnj.vv");
    break;
  }
  case RISCV_FVV_VMIN: {
    SStream_concat(ss, "vfmin.vv");
    break;
  }
  case RISCV_FVV_VDIV: {
    SStream_concat(ss, "vfdiv.vv");
    break;
  }
  case RISCV_FVV_VMAX: {
    SStream_concat(ss, "vfmax.vv");
    break;
  }
  case RISCV_FVV_VADD: {
    SStream_concat(ss, "vfadd.vv");
    break;
  }
  case RISCV_FVV_VSUB: {
    SStream_concat(ss, "vfsub.vv");
    break;
  }
  case RISCV_FVV_VSGNJN: {
    SStream_concat(ss, "vfsgnjn.vv");
    break;
  }
  case RISCV_FVV_VSGNJX: {
    SStream_concat(ss, "vfsgnjx.vv");
    break;
  }
  case RISCV_FVV_VMUL: {
    SStream_concat(ss, "vfmul.vv");
    break;
  }
  }
}
void fvvmatype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FVV_VNMSAC: {
    SStream_concat(ss, "vfnmsac.vv");
    break;
  }
  case RISCV_FVV_VMACC: {
    SStream_concat(ss, "vfmacc.vv");
    break;
  }
  case RISCV_FVV_VNMSUB: {
    SStream_concat(ss, "vfnmsub.vv");
    break;
  }
  case RISCV_FVV_VMSAC: {
    SStream_concat(ss, "vfmsac.vv");
    break;
  }
  case RISCV_FVV_VMADD: {
    SStream_concat(ss, "vfmadd.vv");
    break;
  }
  case RISCV_FVV_VMSUB: {
    SStream_concat(ss, "vfmsub.vv");
    break;
  }
  case RISCV_FVV_VNMACC: {
    SStream_concat(ss, "vfnmacc.vv");
    break;
  }
  case RISCV_FVV_VNMADD: {
    SStream_concat(ss, "vfnmadd.vv");
    break;
  }
  }
}
void fwvvtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FWVV_VADD: {
    SStream_concat(ss, "vfwadd.vv");
    break;
  }
  case RISCV_FWVV_VSUB: {
    SStream_concat(ss, "vfwsub.vv");
    break;
  }
  case RISCV_FWVV_VMUL: {
    SStream_concat(ss, "vfwmul.vv");
    break;
  }
  }
}
void fwvvmatype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FWVV_VMSAC: {
    SStream_concat(ss, "vfwmsac.vv");
    break;
  }
  case RISCV_FWVV_VNMACC: {
    SStream_concat(ss, "vfwnmacc.vv");
    break;
  }
  case RISCV_FWVV_VNMSAC: {
    SStream_concat(ss, "vfwnmsac.vv");
    break;
  }
  case RISCV_FWVV_VMACC: {
    SStream_concat(ss, "vfwmacc.vv");
    break;
  }
  }
}
void fwvtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FWV_VADD: {
    SStream_concat(ss, "vfwadd.wv");
    break;
  }
  case RISCV_FWV_VSUB: {
    SStream_concat(ss, "vfwsub.wv");
    break;
  }
  }
}
void vfunary0_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FV_CVT_F_X: {
    SStream_concat(ss, "vfcvt.f.x.v");
    break;
  }
  case RISCV_FV_CVT_X_F: {
    SStream_concat(ss, "vfcvt.x.f.v");
    break;
  }
  case RISCV_FV_CVT_XU_F: {
    SStream_concat(ss, "vfcvt.xu.f.v");
    break;
  }
  case RISCV_FV_CVT_RTZ_XU_F: {
    SStream_concat(ss, "vfcvt.rtz.xu.f.v");
    break;
  }
  case RISCV_FV_CVT_RTZ_X_F: {
    SStream_concat(ss, "vfcvt.rtz.x.f.v");
    break;
  }
  case RISCV_FV_CVT_F_XU: {
    SStream_concat(ss, "vfcvt.f.xu.v");
    break;
  }
  }
}
void vfwunary0_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FWV_CVT_F_X: {
    SStream_concat(ss, "vfwcvt.f.x.v");
    break;
  }
  case RISCV_FWV_CVT_F_XU: {
    SStream_concat(ss, "vfwcvt.f.xu.v");
    break;
  }
  case RISCV_FWV_CVT_F_F: {
    SStream_concat(ss, "vfwcvt.f.f.v");
    break;
  }
  case RISCV_FWV_CVT_X_F: {
    SStream_concat(ss, "vfwcvt.x.f.v");
    break;
  }
  case RISCV_FWV_CVT_RTZ_XU_F: {
    SStream_concat(ss, "vfwcvt.rtz.xu.f.v");
    break;
  }
  case RISCV_FWV_CVT_RTZ_X_F: {
    SStream_concat(ss, "vfwcvt.rtz.x.f.v");
    break;
  }
  case RISCV_FWV_CVT_XU_F: {
    SStream_concat(ss, "vfwcvt.xu.f.v");
    break;
  }
  }
}
void vfnunary0_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FNV_CVT_F_F: {
    SStream_concat(ss, "vfncvt.f.f.w");
    break;
  }
  case RISCV_FNV_CVT_RTZ_XU_F: {
    SStream_concat(ss, "vfncvt.rtz.xu.f.w");
    break;
  }
  case RISCV_FNV_CVT_F_XU: {
    SStream_concat(ss, "vfncvt.f.xu.w");
    break;
  }
  case RISCV_FNV_CVT_F_X: {
    SStream_concat(ss, "vfncvt.f.x.w");
    break;
  }
  case RISCV_FNV_CVT_RTZ_X_F: {
    SStream_concat(ss, "vfncvt.rtz.x.f.w");
    break;
  }
  case RISCV_FNV_CVT_XU_F: {
    SStream_concat(ss, "vfncvt.xu.f.w");
    break;
  }
  case RISCV_FNV_CVT_X_F: {
    SStream_concat(ss, "vfncvt.x.f.w");
    break;
  }
  case RISCV_FNV_CVT_ROD_F_F: {
    SStream_concat(ss, "vfncvt.rod.f.f.w");
    break;
  }
  }
}
void vfunary1_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FVV_VCLASS: {
    SStream_concat(ss, "vfclass.v");
    break;
  }
  case RISCV_FVV_VREC7: {
    SStream_concat(ss, "vfrec7.v");
    break;
  }
  case RISCV_FVV_VRSQRT7: {
    SStream_concat(ss, "vfrsqrt7.v");
    break;
  }
  case RISCV_FVV_VSQRT: {
    SStream_concat(ss, "vfsqrt.v");
    break;
  }
  }
}
void fvftype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VF_VMIN: {
    SStream_concat(ss, "vfmin.vf");
    break;
  }
  case RISCV_VF_VSGNJ: {
    SStream_concat(ss, "vfsgnj.vf");
    break;
  }
  case RISCV_VF_VSLIDE1UP: {
    SStream_concat(ss, "vfslide1up.vf");
    break;
  }
  case RISCV_VF_VRSUB: {
    SStream_concat(ss, "vfrsub.vf");
    break;
  }
  case RISCV_VF_VADD: {
    SStream_concat(ss, "vfadd.vf");
    break;
  }
  case RISCV_VF_VSGNJX: {
    SStream_concat(ss, "vfsgnjx.vf");
    break;
  }
  case RISCV_VF_VDIV: {
    SStream_concat(ss, "vfdiv.vf");
    break;
  }
  case RISCV_VF_VSUB: {
    SStream_concat(ss, "vfsub.vf");
    break;
  }
  case RISCV_VF_VRDIV: {
    SStream_concat(ss, "vfrdiv.vf");
    break;
  }
  case RISCV_VF_VMUL: {
    SStream_concat(ss, "vfmul.vf");
    break;
  }
  case RISCV_VF_VSGNJN: {
    SStream_concat(ss, "vfsgnjn.vf");
    break;
  }
  case RISCV_VF_VMAX: {
    SStream_concat(ss, "vfmax.vf");
    break;
  }
  case RISCV_VF_VSLIDE1DOWN: {
    SStream_concat(ss, "vfslide1down.vf");
    break;
  }
  }
}
void fvfmatype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VF_VNMADD: {
    SStream_concat(ss, "vfnmadd.vf");
    break;
  }
  case RISCV_VF_VMSUB: {
    SStream_concat(ss, "vfmsub.vf");
    break;
  }
  case RISCV_VF_VMACC: {
    SStream_concat(ss, "vfmacc.vf");
    break;
  }
  case RISCV_VF_VMADD: {
    SStream_concat(ss, "vfmadd.vf");
    break;
  }
  case RISCV_VF_VNMSAC: {
    SStream_concat(ss, "vfnmsac.vf");
    break;
  }
  case RISCV_VF_VMSAC: {
    SStream_concat(ss, "vfmsac.vf");
    break;
  }
  case RISCV_VF_VNMACC: {
    SStream_concat(ss, "vfnmacc.vf");
    break;
  }
  case RISCV_VF_VNMSUB: {
    SStream_concat(ss, "vfnmsub.vf");
    break;
  }
  }
}
void fwvftype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FWVF_VADD: {
    SStream_concat(ss, "vfwadd.vf");
    break;
  }
  case RISCV_FWVF_VSUB: {
    SStream_concat(ss, "vfwsub.vf");
    break;
  }
  case RISCV_FWVF_VMUL: {
    SStream_concat(ss, "vfwmul.vf");
    break;
  }
  }
}
void fwvfmatype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FWVF_VNMACC: {
    SStream_concat(ss, "vfwnmacc.vf");
    break;
  }
  case RISCV_FWVF_VMACC: {
    SStream_concat(ss, "vfwmacc.vf");
    break;
  }
  case RISCV_FWVF_VNMSAC: {
    SStream_concat(ss, "vfwnmsac.vf");
    break;
  }
  case RISCV_FWVF_VMSAC: {
    SStream_concat(ss, "vfwmsac.vf");
    break;
  }
  }
}
void fwftype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FWF_VSUB: {
    SStream_concat(ss, "vfwsub.wf");
    break;
  }
  case RISCV_FWF_VADD: {
    SStream_concat(ss, "vfwadd.wf");
    break;
  }
  }
}
void nfields_string(uint64_t member, SStream *ss) {
  switch (member) {
  case 0x7: {
    SStream_concat(ss, "seg8");
    break;
  }
  case 0x5: {
    SStream_concat(ss, "seg6");
    break;
  }
  case 0x1: {
    SStream_concat(ss, "seg2");
    break;
  }
  case 0x3: {
    SStream_concat(ss, "seg4");
    break;
  }
  case 0x2: {
    SStream_concat(ss, "seg3");
    break;
  }
  case 0x4: {
    SStream_concat(ss, "seg5");
    break;
  }
  case 0x6: {
    SStream_concat(ss, "seg7");
    break;
  }
  case 0x0: {
    SStream_concat(ss, "");
    break;
  }
  }
}
void vlewidth_bitsnumberstr(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VLE16: {
    SStream_concat(ss, "16");
    break;
  }
  case RISCV_VLE32: {
    SStream_concat(ss, "32");
    break;
  }
  case RISCV_VLE64: {
    SStream_concat(ss, "64");
    break;
  }
  case RISCV_VLE8: {
    SStream_concat(ss, "8");
    break;
  }
  }
}
void vmtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VLM: {
    SStream_concat(ss, "vlm.v");
    break;
  }
  case RISCV_VSM: {
    SStream_concat(ss, "vsm.v");
    break;
  }
  }
}
void mmtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_MM_VMANDN: {
    SStream_concat(ss, "vmandn.mm");
    break;
  }
  case RISCV_MM_VMOR: {
    SStream_concat(ss, "vmor.mm");
    break;
  }
  case RISCV_MM_VMXOR: {
    SStream_concat(ss, "vmxor.mm");
    break;
  }
  case RISCV_MM_VMNOR: {
    SStream_concat(ss, "vmnor.mm");
    break;
  }
  case RISCV_MM_VMORN: {
    SStream_concat(ss, "vmorn.mm");
    break;
  }
  case RISCV_MM_VMAND: {
    SStream_concat(ss, "vmand.mm");
    break;
  }
  case RISCV_MM_VMXNOR: {
    SStream_concat(ss, "vmxnor.mm");
    break;
  }
  case RISCV_MM_VMNAND: {
    SStream_concat(ss, "vmnand.mm");
    break;
  }
  }
}
void vvmtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VVM_VMADC: {
    SStream_concat(ss, "vmadc.vvm");
    break;
  }
  case RISCV_VVM_VMSBC: {
    SStream_concat(ss, "vmsbc.vvm");
    break;
  }
  }
}
void vvmctype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VVMC_VMADC: {
    SStream_concat(ss, "vmadc.vv");
    break;
  }
  case RISCV_VVMC_VMSBC: {
    SStream_concat(ss, "vmsbc.vv");
    break;
  }
  }
}
void vvmstype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VVMS_VSBC: {
    SStream_concat(ss, "vsbc.vvm");
    break;
  }
  case RISCV_VVMS_VADC: {
    SStream_concat(ss, "vadc.vvm");
    break;
  }
  }
}
void vvcmptype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VVCMP_VMSEQ: {
    SStream_concat(ss, "vmseq.vv");
    break;
  }
  case RISCV_VVCMP_VMSLTU: {
    SStream_concat(ss, "vmsltu.vv");
    break;
  }
  case RISCV_VVCMP_VMSLE: {
    SStream_concat(ss, "vmsle.vv");
    break;
  }
  case RISCV_VVCMP_VMSLEU: {
    SStream_concat(ss, "vmsleu.vv");
    break;
  }
  case RISCV_VVCMP_VMSNE: {
    SStream_concat(ss, "vmsne.vv");
    break;
  }
  case RISCV_VVCMP_VMSLT: {
    SStream_concat(ss, "vmslt.vv");
    break;
  }
  }
}
void vxmtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VXM_VMSBC: {
    SStream_concat(ss, "vmsbc.vxm");
    break;
  }
  case RISCV_VXM_VMADC: {
    SStream_concat(ss, "vmadc.vxm");
    break;
  }
  }
}
void vxmctype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VXMC_VMSBC: {
    SStream_concat(ss, "vmsbc.vx");
    break;
  }
  case RISCV_VXMC_VMADC: {
    SStream_concat(ss, "vmadc.vx");
    break;
  }
  }
}
void vxmstype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VXMS_VADC: {
    SStream_concat(ss, "vadc.vxm");
    break;
  }
  case RISCV_VXMS_VSBC: {
    SStream_concat(ss, "vsbc.vxm");
    break;
  }
  }
}
void vxcmptype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VXCMP_VMSLTU: {
    SStream_concat(ss, "vmsltu.vx");
    break;
  }
  case RISCV_VXCMP_VMSLEU: {
    SStream_concat(ss, "vmsleu.vx");
    break;
  }
  case RISCV_VXCMP_VMSNE: {
    SStream_concat(ss, "vmsne.vx");
    break;
  }
  case RISCV_VXCMP_VMSGT: {
    SStream_concat(ss, "vmsgt.vx");
    break;
  }
  case RISCV_VXCMP_VMSEQ: {
    SStream_concat(ss, "vmseq.vx");
    break;
  }
  case RISCV_VXCMP_VMSGTU: {
    SStream_concat(ss, "vmsgtu.vx");
    break;
  }
  case RISCV_VXCMP_VMSLT: {
    SStream_concat(ss, "vmslt.vx");
    break;
  }
  case RISCV_VXCMP_VMSLE: {
    SStream_concat(ss, "vmsle.vx");
    break;
  }
  }
}
void vimtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VIM_VMADC: {
    SStream_concat(ss, "vmadc.vim");
    break;
  }
  }
}
void vimctype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VIMC_VMADC: {
    SStream_concat(ss, "vmadc.vi");
    break;
  }
  }
}
void vimstype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VIMS_VADC: {
    SStream_concat(ss, "vadc.vim");
    break;
  }
  }
}
void vicmptype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VICMP_VMSEQ: {
    SStream_concat(ss, "vmseq.vi");
    break;
  }
  case RISCV_VICMP_VMSGTU: {
    SStream_concat(ss, "vmsgtu.vi");
    break;
  }
  case RISCV_VICMP_VMSLEU: {
    SStream_concat(ss, "vmsleu.vi");
    break;
  }
  case RISCV_VICMP_VMSLE: {
    SStream_concat(ss, "vmsle.vi");
    break;
  }
  case RISCV_VICMP_VMSNE: {
    SStream_concat(ss, "vmsne.vi");
    break;
  }
  case RISCV_VICMP_VMSGT: {
    SStream_concat(ss, "vmsgt.vi");
    break;
  }
  }
}
void fvvmtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FVVM_VMFNE: {
    SStream_concat(ss, "vmfne.vv");
    break;
  }
  case RISCV_FVVM_VMFEQ: {
    SStream_concat(ss, "vmfeq.vv");
    break;
  }
  case RISCV_FVVM_VMFLT: {
    SStream_concat(ss, "vmflt.vv");
    break;
  }
  case RISCV_FVVM_VMFLE: {
    SStream_concat(ss, "vmfle.vv");
    break;
  }
  }
}
void fvfmtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_VFM_VMFNE: {
    SStream_concat(ss, "vmfne.vf");
    break;
  }
  case RISCV_VFM_VMFGT: {
    SStream_concat(ss, "vmfgt.vf");
    break;
  }
  case RISCV_VFM_VMFLT: {
    SStream_concat(ss, "vmflt.vf");
    break;
  }
  case RISCV_VFM_VMFEQ: {
    SStream_concat(ss, "vmfeq.vf");
    break;
  }
  case RISCV_VFM_VMFLE: {
    SStream_concat(ss, "vmfle.vf");
    break;
  }
  case RISCV_VFM_VMFGE: {
    SStream_concat(ss, "vmfge.vf");
    break;
  }
  }
}
void rivvtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_IVV_VWREDSUMU: {
    SStream_concat(ss, "vwredsumu.vs");
    break;
  }
  case RISCV_IVV_VWREDSUM: {
    SStream_concat(ss, "vwredsum.vs");
    break;
  }
  }
}
void rmvvtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_MVV_VREDAND: {
    SStream_concat(ss, "vredand.vs");
    break;
  }
  case RISCV_MVV_VREDXOR: {
    SStream_concat(ss, "vredxor.vs");
    break;
  }
  case RISCV_MVV_VREDOR: {
    SStream_concat(ss, "vredor.vs");
    break;
  }
  case RISCV_MVV_VREDMIN: {
    SStream_concat(ss, "vredmin.vs");
    break;
  }
  case RISCV_MVV_VREDMAXU: {
    SStream_concat(ss, "vredmaxu.vs");
    break;
  }
  case RISCV_MVV_VREDMINU: {
    SStream_concat(ss, "vredminu.vs");
    break;
  }
  case RISCV_MVV_VREDSUM: {
    SStream_concat(ss, "vredsum.vs");
    break;
  }
  case RISCV_MVV_VREDMAX: {
    SStream_concat(ss, "vredmax.vs");
    break;
  }
  }
}
void rfvvtype_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_FVV_VFWREDOSUM: {
    SStream_concat(ss, "vfwredosum.vs");
    break;
  }
  case RISCV_FVV_VFREDOSUM: {
    SStream_concat(ss, "vfredosum.vs");
    break;
  }
  case RISCV_FVV_VFREDUSUM: {
    SStream_concat(ss, "vfredusum.vs");
    break;
  }
  case RISCV_FVV_VFREDMIN: {
    SStream_concat(ss, "vfredmin.vs");
    break;
  }
  case RISCV_FVV_VFWREDUSUM: {
    SStream_concat(ss, "vfwredusum.vs");
    break;
  }
  case RISCV_FVV_VFREDMAX: {
    SStream_concat(ss, "vfredmax.vs");
    break;
  }
  }
}
void cbop_mnemonic(uint64_t member, SStream *ss) {
  switch (member) {
  case RISCV_CBO_INVAL: {
    SStream_concat(ss, "cbo.inval");
    break;
  }
  case RISCV_CBO_CLEAN: {
    SStream_concat(ss, "cbo.clean");
    break;
  }
  case RISCV_CBO_FLUSH: {
    SStream_concat(ss, "cbo.flush");
    break;
  }
  }
}
#endif
